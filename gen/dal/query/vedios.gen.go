// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/41197-yhkt/tiktok-video/gen/dal/model"
)

func newVedio(db *gorm.DB, opts ...gen.DOOption) vedio {
	_vedio := vedio{}

	_vedio.vedioDo.UseDB(db, opts...)
	_vedio.vedioDo.UseModel(&model.Vedio{})

	tableName := _vedio.vedioDo.TableName()
	_vedio.ALL = field.NewAsterisk(tableName)
	_vedio.ID = field.NewUint(tableName, "id")
	_vedio.CreatedAt = field.NewTime(tableName, "created_at")
	_vedio.UpdatedAt = field.NewTime(tableName, "updated_at")
	_vedio.DeletedAt = field.NewField(tableName, "deleted_at")
	_vedio.Id = field.NewUint(tableName, "id")
	_vedio.AuthorId = field.NewInt64(tableName, "author_id")
	_vedio.PlayUrl = field.NewString(tableName, "play_url")
	_vedio.CoverUrl = field.NewString(tableName, "cover_url")
	_vedio.FavoriteCount = field.NewString(tableName, "favorite_count")
	_vedio.CommentCount = field.NewString(tableName, "comment_count")
	_vedio.Title = field.NewString(tableName, "title")
	_vedio.Created_at = field.NewTime(tableName, "created_at")
	_vedio.Updated_at = field.NewTime(tableName, "updated_at")

	_vedio.fillFieldMap()

	return _vedio
}

type vedio struct {
	vedioDo vedioDo

	ALL           field.Asterisk
	ID            field.Uint
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	Id            field.Uint
	AuthorId      field.Int64
	PlayUrl       field.String
	CoverUrl      field.String
	FavoriteCount field.String
	CommentCount  field.String
	Title         field.String
	Created_at    field.Time
	Updated_at    field.Time

	fieldMap map[string]field.Expr
}

func (v vedio) Table(newTableName string) *vedio {
	v.vedioDo.UseTable(newTableName)
	return v.updateTableName(newTableName)
}

func (v vedio) As(alias string) *vedio {
	v.vedioDo.DO = *(v.vedioDo.As(alias).(*gen.DO))
	return v.updateTableName(alias)
}

func (v *vedio) updateTableName(table string) *vedio {
	v.ALL = field.NewAsterisk(table)
	v.ID = field.NewUint(table, "id")
	v.CreatedAt = field.NewTime(table, "created_at")
	v.UpdatedAt = field.NewTime(table, "updated_at")
	v.DeletedAt = field.NewField(table, "deleted_at")
	v.Id = field.NewUint(table, "id")
	v.AuthorId = field.NewInt64(table, "author_id")
	v.PlayUrl = field.NewString(table, "play_url")
	v.CoverUrl = field.NewString(table, "cover_url")
	v.FavoriteCount = field.NewString(table, "favorite_count")
	v.CommentCount = field.NewString(table, "comment_count")
	v.Title = field.NewString(table, "title")
	v.Created_at = field.NewTime(table, "created_at")
	v.Updated_at = field.NewTime(table, "updated_at")

	v.fillFieldMap()

	return v
}

func (v *vedio) WithContext(ctx context.Context) *vedioDo { return v.vedioDo.WithContext(ctx) }

func (v vedio) TableName() string { return v.vedioDo.TableName() }

func (v vedio) Alias() string { return v.vedioDo.Alias() }

func (v *vedio) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := v.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (v *vedio) fillFieldMap() {
	v.fieldMap = make(map[string]field.Expr, 13)
	v.fieldMap["id"] = v.ID
	v.fieldMap["created_at"] = v.CreatedAt
	v.fieldMap["updated_at"] = v.UpdatedAt
	v.fieldMap["deleted_at"] = v.DeletedAt
	v.fieldMap["id"] = v.Id
	v.fieldMap["author_id"] = v.AuthorId
	v.fieldMap["play_url"] = v.PlayUrl
	v.fieldMap["cover_url"] = v.CoverUrl
	v.fieldMap["favorite_count"] = v.FavoriteCount
	v.fieldMap["comment_count"] = v.CommentCount
	v.fieldMap["title"] = v.Title
	v.fieldMap["created_at"] = v.Created_at
	v.fieldMap["updated_at"] = v.Updated_at
}

func (v vedio) clone(db *gorm.DB) vedio {
	v.vedioDo.ReplaceConnPool(db.Statement.ConnPool)
	return v
}

func (v vedio) replaceDB(db *gorm.DB) vedio {
	v.vedioDo.ReplaceDB(db)
	return v
}

type vedioDo struct{ gen.DO }

// where(id=@id)
func (v vedioDo) FindByID(id int64) (result model.Vedio, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("id=? ")

	var executeSQL *gorm.DB

	executeSQL = v.UnderlyingDB().Where(generateSQL.String(), params...).Take(&result)
	err = executeSQL.Error
	return
}

// sql(select * from @@table where AuthorId = @Authorid)
func (v vedioDo) FindByAuthorId(Authorid int) (result model.Vedio, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, Authorid)
	generateSQL.WriteString("select * from vedios where AuthorId = ? ")

	var executeSQL *gorm.DB

	executeSQL = v.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result)
	err = executeSQL.Error
	return
}

func (v vedioDo) Debug() *vedioDo {
	return v.withDO(v.DO.Debug())
}

func (v vedioDo) WithContext(ctx context.Context) *vedioDo {
	return v.withDO(v.DO.WithContext(ctx))
}

func (v vedioDo) ReadDB() *vedioDo {
	return v.Clauses(dbresolver.Read)
}

func (v vedioDo) WriteDB() *vedioDo {
	return v.Clauses(dbresolver.Write)
}

func (v vedioDo) Session(config *gorm.Session) *vedioDo {
	return v.withDO(v.DO.Session(config))
}

func (v vedioDo) Clauses(conds ...clause.Expression) *vedioDo {
	return v.withDO(v.DO.Clauses(conds...))
}

func (v vedioDo) Returning(value interface{}, columns ...string) *vedioDo {
	return v.withDO(v.DO.Returning(value, columns...))
}

func (v vedioDo) Not(conds ...gen.Condition) *vedioDo {
	return v.withDO(v.DO.Not(conds...))
}

func (v vedioDo) Or(conds ...gen.Condition) *vedioDo {
	return v.withDO(v.DO.Or(conds...))
}

func (v vedioDo) Select(conds ...field.Expr) *vedioDo {
	return v.withDO(v.DO.Select(conds...))
}

func (v vedioDo) Where(conds ...gen.Condition) *vedioDo {
	return v.withDO(v.DO.Where(conds...))
}

func (v vedioDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *vedioDo {
	return v.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (v vedioDo) Order(conds ...field.Expr) *vedioDo {
	return v.withDO(v.DO.Order(conds...))
}

func (v vedioDo) Distinct(cols ...field.Expr) *vedioDo {
	return v.withDO(v.DO.Distinct(cols...))
}

func (v vedioDo) Omit(cols ...field.Expr) *vedioDo {
	return v.withDO(v.DO.Omit(cols...))
}

func (v vedioDo) Join(table schema.Tabler, on ...field.Expr) *vedioDo {
	return v.withDO(v.DO.Join(table, on...))
}

func (v vedioDo) LeftJoin(table schema.Tabler, on ...field.Expr) *vedioDo {
	return v.withDO(v.DO.LeftJoin(table, on...))
}

func (v vedioDo) RightJoin(table schema.Tabler, on ...field.Expr) *vedioDo {
	return v.withDO(v.DO.RightJoin(table, on...))
}

func (v vedioDo) Group(cols ...field.Expr) *vedioDo {
	return v.withDO(v.DO.Group(cols...))
}

func (v vedioDo) Having(conds ...gen.Condition) *vedioDo {
	return v.withDO(v.DO.Having(conds...))
}

func (v vedioDo) Limit(limit int) *vedioDo {
	return v.withDO(v.DO.Limit(limit))
}

func (v vedioDo) Offset(offset int) *vedioDo {
	return v.withDO(v.DO.Offset(offset))
}

func (v vedioDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *vedioDo {
	return v.withDO(v.DO.Scopes(funcs...))
}

func (v vedioDo) Unscoped() *vedioDo {
	return v.withDO(v.DO.Unscoped())
}

func (v vedioDo) Create(values ...*model.Vedio) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Create(values)
}

func (v vedioDo) CreateInBatches(values []*model.Vedio, batchSize int) error {
	return v.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (v vedioDo) Save(values ...*model.Vedio) error {
	if len(values) == 0 {
		return nil
	}
	return v.DO.Save(values)
}

func (v vedioDo) First() (*model.Vedio, error) {
	if result, err := v.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Vedio), nil
	}
}

func (v vedioDo) Take() (*model.Vedio, error) {
	if result, err := v.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Vedio), nil
	}
}

func (v vedioDo) Last() (*model.Vedio, error) {
	if result, err := v.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Vedio), nil
	}
}

func (v vedioDo) Find() ([]*model.Vedio, error) {
	result, err := v.DO.Find()
	return result.([]*model.Vedio), err
}

func (v vedioDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Vedio, err error) {
	buf := make([]*model.Vedio, 0, batchSize)
	err = v.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (v vedioDo) FindInBatches(result *[]*model.Vedio, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return v.DO.FindInBatches(result, batchSize, fc)
}

func (v vedioDo) Attrs(attrs ...field.AssignExpr) *vedioDo {
	return v.withDO(v.DO.Attrs(attrs...))
}

func (v vedioDo) Assign(attrs ...field.AssignExpr) *vedioDo {
	return v.withDO(v.DO.Assign(attrs...))
}

func (v vedioDo) Joins(fields ...field.RelationField) *vedioDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Joins(_f))
	}
	return &v
}

func (v vedioDo) Preload(fields ...field.RelationField) *vedioDo {
	for _, _f := range fields {
		v = *v.withDO(v.DO.Preload(_f))
	}
	return &v
}

func (v vedioDo) FirstOrInit() (*model.Vedio, error) {
	if result, err := v.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Vedio), nil
	}
}

func (v vedioDo) FirstOrCreate() (*model.Vedio, error) {
	if result, err := v.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Vedio), nil
	}
}

func (v vedioDo) FindByPage(offset int, limit int) (result []*model.Vedio, count int64, err error) {
	result, err = v.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = v.Offset(-1).Limit(-1).Count()
	return
}

func (v vedioDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = v.Count()
	if err != nil {
		return
	}

	err = v.Offset(offset).Limit(limit).Scan(result)
	return
}

func (v vedioDo) Scan(result interface{}) (err error) {
	return v.DO.Scan(result)
}

func (v vedioDo) Delete(models ...*model.Vedio) (result gen.ResultInfo, err error) {
	return v.DO.Delete(models)
}

func (v *vedioDo) withDO(do gen.Dao) *vedioDo {
	v.DO = *do.(*gen.DO)
	return v
}
